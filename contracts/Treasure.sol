// SPDX-License-Identifier: MIT
pragma solidity 0.8.13;

import "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";

contract Treasure is ERC20Upgradeable, OwnableUpgradeable{
    mapping (address => uint256) internal depositBalances;

    function initialize() initializer public {
        __ERC20_init("Treasure", "TREASURE");
        __Ownable_init();
    }

    function getDepositBalance (address _user) public view returns (uint256) {
        return depositBalances[_user];
    }

    function mint(address account, uint256 amount) public onlyOwner {
        _mint(account, amount);
    }

    function deposit() external payable {
        depositBalances[msg.sender] += msg.value;
    }

    function withdrawAll() virtual external {
        uint256 balance = getDepositBalance(msg.sender);
        require(balance > 0, "Insufficient balance");

        (bool success, ) = msg.sender.call{value: balance}("");
        require(success, "Failed to send Ether");

        depositBalances[msg.sender] = 0;
    }
}
